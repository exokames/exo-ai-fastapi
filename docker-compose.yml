services:
  # Single API service with dynamic environment
  app:
    build:
      context: .
      args:
        APP_ENV: ${APP_ENV:-development}
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
      - ./short_term_memory:/app/data
    env_file:
      - .env.${APP_ENV:-development}
    environment:
      - APP_ENV=${APP_ENV:-development}
      # Pass sensitive variables at runtime
      - OPENAI_API_KEY=${OPENAI_API_KEY:-dummy-key-for-development}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-supersecretkeythatshouldbechangedforproduction}
      # - QDRANT_API_KEY="xxx"
      # - QDRANT_URL=http://qdrant:6333      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: on-failure
    depends_on:
      - qdrant
      - db
    networks:
      - monitoring

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - ./long_term_memory:/qdrant/storage
    restart: on-failure
    networks:
      - monitoring
      
  db:
    image: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data/pgdata
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=app
      - PGDATA=/var/lib/postgresql/data/pgdata
    restart: on-failure
    networks:
      - monitoring

  # Prometheus
  # prometheus:
  #   image: prom/prometheus:latest
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   networks:
  #     - monitoring
  #   restart: always

  # Grafana
  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  #     - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
  #     - ./grafana/dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   networks:
  #     - monitoring
  #   restart: always

  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:latest
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   networks:
  #     - monitoring
  #   restart: always


networks:
  monitoring:
    driver: bridge

volumes:
  grafana-storage: 
  postgres-data: